var 
UForm: TclStyleForm;
btnUpdateProduct,btnDeleteProduct:TCLProButton;
updateName:TCLProEdit;
updateExplanation:TCLProEdit;
updateQuantity:TCLProEdit;
updatePrice:TCLProEdit;
updateCategory_id,updateSupplier_id:TCLComboBox;
getId:TCLLabel;
Qry,Qryy: TClSQLiteQuery;
i:Integer;
ProPanel1:TclProPanel;
updateNameLabel,productHeadLabel,updateExplanationLabel,updatePriceLabel,updateQuantityLabel:TClProLabel;

void UpdateProducts;
{
  try
  
    Clomosy.DBSQLiteQuery.Sql.Text = '
      UPDATE Products SET name ='+QuotedStr(updateName.Text)+',
      explanation= '+QuotedStr(updateExplanation.Text)+',
      quantity='+QuotedStr(updateQuantity.Text)+',
      price='+QuotedStr(updatePrice.Text)+',
      category_id='+updateCategory_id.GetValueIndex(updateCategory_id.ItemIndex)+',
      supplier_id='+updateSupplier_id.GetValueIndex(updateSupplier_id.ItemIndex)+'
      WHERE id='+QuotedStr(getId.Text)+'
  ';
    Clomosy.DBSQLiteQuery.OpenOrExecute;
    ShowMessage('Updating data to the table was successful!');
    Clomosy.RunUnit('productListUnit');
    
  except
    ShowMessage('Exception Class: '+LastExceptionClassName+' Exception Message: '+LastExceptionMessage);
  }
  
}
void DatabaseConnection;
var
  TableExists: Boolean;
{
  try
    Clomosy.DBSQLiteConnect(Clomosy.AppFilesPath + 'EnvanterManagement.db3', '');

    Clomosy.DBSQLiteQuery.Sql.Text = 'SELECT name FROM sqlite_master WHERE type="table" AND name="Products"';
    Clomosy.DBSQLiteQuery.OpenOrExecute;
    
    TableExists = not Clomosy.DBSQLiteQuery.Eof;
    
    if not (TableExists)
    {
      Clomosy.DBSQLiteQuery.Sql.Text = 'CREATE TABLE Products(
        id INTEGER NOT NULL UNIQUE,
        name TEXT NOT NULL,
        explanation TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        price REAL NOT NULL,
        supplier_id INTEGER NOT NULL,
        category_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY(id AUTOINCREMENT)
      );';
      Clomosy.DBSQLiteQuery.OpenOrExecute;

    }
  except
    ShowMessage('Exception Class: '+LastExceptionClassName+' Exception Message: '+LastExceptionMessage);
    }
}
void GetProduct;
{
DatabaseConnection;
  try
  
    Qry = Clomosy.DBSQLiteQueryWith('SELECT * FROM Products WHERE id='+QuotedStr(getId.Text)+'');
    Qry.OpenOrExecute;
    
    
    if (Qry.Found)
    {
      listView1.clLoadProListViewDataFromDataset(Qry);

    }
    else
      ShowMessage('No products found.');
  except

    ShowMessage('Exception class: '+LastExceptionClassName+' Exception Message: ' + LastExceptionMessage);
}
}

void DeleteProducts;
{
  try
  
    Clomosy.DBSQLiteQuery.Sql.Text = 'DELETE FROM Products WHERE id='+QuotedStr(getId.Text)+'';
    Clomosy.DBSQLiteQuery.OpenOrExecute;

    ShowMessage('Deleting data was successful!');
    Clomosy.RunUnit('productListUnit');
    UForm.clHide;

  except
    ShowMessage('Exception Class: '+LastExceptionClassName+' Exception Message: '+LastExceptionMessage);
  }
}
void ProcNo;
{
  ShowMessage('no clicked');
}
/*
void DeleteCheck;
{
  Clomosy.AskAndCall('Are you sure to delete this product?','DeleteProducts','ProcNo');//Çalışmadı
}*/

void DatabaseConnectionForCid;
var
  TableExists: Boolean;
{
  try
    Clomosy.DBSQLiteConnect(Clomosy.AppFilesPath + 'EnvanterManagement.db3', '');

    Clomosy.DBSQLiteQuery.Sql.Text = 'SELECT name FROM sqlite_master WHERE type="table" AND name="Category"';
    Clomosy.DBSQLiteQuery.OpenOrExecute;
    
    TableExists = not Clomosy.DBSQLiteQuery.Eof;
    
    if not (TableExists)
    {
      Clomosy.DBSQLiteQuery.Sql.Text = 'CREATE TABLE Category(
        id INTEGER NOT NULL UNIQUE,
        name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY(id AUTOINCREMENT)
      )';
      Clomosy.DBSQLiteQuery.OpenOrExecute;

    }
  except
    ShowMessage('Exception Class: '+LastExceptionClassName+' Exception Message: '+LastExceptionMessage);
}
}
void GetCategory;
{
DatabaseConnectionForCid;
  try
  
    Qry = Clomosy.DBSQLiteQueryWith('SELECT * FROM Category');
    Qry.OpenOrExecute;
    
    
    if (Qry.Found)
    {
    for i = 0 to Qry.RecordCount-1
      {
      updateCategory_id.AddItem(Qry.FieldByName('name').AsString,Qry.FieldByName('id').AsString);
      Qry.Next;
      }
      
    }
 
  except

    ShowMessage('Exception class: '+LastExceptionClassName+' Exception Message: ' + LastExceptionMessage);
}
}

void DatabaseConnectionForSid;
var
  TableExists: Boolean;
{
  try
    Clomosy.DBSQLiteConnect(Clomosy.AppFilesPath + 'EnvanterManagement.db3', '');

    Clomosy.DBSQLiteQuery.Sql.Text = 'SELECT name FROM sqlite_master WHERE type="table" AND name="Supplier"';
    Clomosy.DBSQLiteQuery.OpenOrExecute;
    
    TableExists = not Clomosy.DBSQLiteQuery.Eof;
    
    if not (TableExists)
    {
      Clomosy.DBSQLiteQuery.Sql.Text = 'CREATE TABLE Supplier(
        id INTEGER NOT NULL UNIQUE,
        name TEXT NOT NULL,
        address TEXT NOT NULL,
        contact TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY(id AUTOINCREMENT)
      )';
      Clomosy.DBSQLiteQuery.OpenOrExecute;

    }
  except
    ShowMessage('Exception Class: '+LastExceptionClassName+' Exception Message: '+LastExceptionMessage);
}
}
void GetSupplier;
{
  DatabaseConnectionForSid;
  try
    Qry = Clomosy.DBSQLiteQueryWith('SELECT * FROM Supplier');
    Qry.OpenOrExecute;

    if (Qry.Found)
    {
    for i = 0 to Qry.RecordCount-1
      {
      updateSupplier_id.AddItem(Qry.FieldByName('name').AsString,Qry.FieldByName('id').AsString);
      Qry.Next;
      }
      
    }
    
  except

    ShowMessage('Exception class: '+LastExceptionClassName+' Exception Message: ' + LastExceptionMessage);
  }
}
{
  UForm=TclStyleForm.Create(Self);
  UForm.clSetStyle(UForm.LightSB);
  UForm.SetFormColor('#ffc6b3','#d6ebff',clGCross);
  
  ProPanel1=UForm.AddNewProPanel(UForm,'ProPanel1');
  ProPanel1.Align=alClient;
  ProPanel1.Height =UForm.clHeight;
  ProPanel1.Width =UForm.clWidth;
  ProPanel1.clProSettings.IsFill = True; 
  ProPanel1.clProSettings.IsRound = True;
  ProPanel1.SetclProSettings(ProPanel1.clProSettings);
  
  productHeadLabel = UForm.AddNewProLabel(ProPanel1, 'productHeadLabel', 'Product Add');
  productHeadLabel.Align=alMostTop;
  productHeadLabel.Margins.Top=UForm.clHeight/50;
  productHeadLabel.clProSettings.FontVertAlign = palcenter;
  productHeadLabel.clProSettings.FontHorzAlign = palcenter;
  productHeadLabel.clProSettings.FontSize = 17;
  productHeadLabel.clProSettings.TextSettings.Font.Style = [fsBold];
  productHeadLabel.SetclProSettings(productHeadLabel.clProSettings);
  
  getId=UForm.AddNewLabel(UForm,'getId','');
  getId.Visible=False;
  getId.Text=Clomosy.GlobalVariableString;
  GetProduct;
  
  updateNameLabel = UForm.AddNewProLabel(ProPanel1, 'updateNameLabel', 'Product Name ');
  updateNameLabel.margins.Top=UForm.clHeight/40;
  updateNameLabel.margins.Left=12;
  updateNameLabel.clProSettings.FontSize =15;
  updateNameLabel.Align=alTop;
  updateNameLabel.clProSettings.TextSettings.Font.Style = [fsItalic];
  updateNameLabel.SetclProSettings(updateNameLabel.clProSettings);
  
  updateName=UForm.AddNewProEdit(ProPanel1,'updateName', 'Please enter the product name : ');
  updateName.Align=alTop;
  updateName.margins.Top=UForm.clHeight/60;
  updateName.Margins.Right=UForm.clWidth/40;
  updateName.Margins.Left=UForm.clWidth/40;
  updateName.Height=45;
  updateName.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  updateName.clProSettings.RoundHeight = 15;
  updateName.clProSettings.RoundWidth = 15;
  updateName.clProSettings.BorderWidth = 3;
  updateName.Text=Qry.FieldByName('name').AsString;
  updateName.SetclProSettings(updateName.clProSettings);
  

  updateExplanationLabel = UForm.AddNewProLabel(ProPanel1, 'updateExplanationLabel', 'Product Explanation ');
  updateExplanationLabel.margins.Top=UForm.clHeight/40;
  updateExplanationLabel.margins.Left=12;
  updateExplanationLabel.clProSettings.FontSize =15;
  updateExplanationLabel.Align=alTop;
  updateExplanationLabel.clProSettings.TextSettings.Font.Style = [fsItalic];
  updateExplanationLabel.SetclProSettings(updateExplanationLabel.clProSettings);
  
  updateExplanation=UForm.AddNewProEdit(ProPanel1,'updateExplanation', 'Please enter the product explanation : ');
  updateExplanation.Align=alTop;
  updateExplanation.margins.Top=UForm.clHeight/60;
  updateExplanation.Margins.Right=UForm.clWidth/40;
  updateExplanation.Margins.Left=UForm.clWidth/40;
  updateExplanation.Height=45;
  updateExplanation.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  updateExplanation.clProSettings.RoundHeight = 15;
  updateExplanation.clProSettings.RoundWidth = 15;
  updateExplanation.clProSettings.BorderWidth = 3;
  updateExplanation.Text=Qry.FieldByName('explanation').AsString;
  updateExplanation.SetclProSettings(updateExplanation.clProSettings);
  
  updateQuantityLabel = UForm.AddNewProLabel(ProPanel1, 'updateQuantityLabel', 'Product Quantity ');
  updateQuantityLabel.margins.Top=UForm.clHeight/40;
  updateQuantityLabel.margins.Left=12;
  updateQuantityLabel.clProSettings.FontSize =15;
  updateQuantityLabel.Align=alTop;
  updateQuantityLabel.clProSettings.TextSettings.Font.Style = [fsItalic];
  updateQuantityLabel.SetclProSettings(updateQuantityLabel.clProSettings);
  
  updateQuantity=UForm.AddNewProEdit(ProPanel1,'updateQuantity', 'Please enter the product quantity : ');
  updateQuantity.Align=alTop;
  updateQuantity.margins.Top=UForm.clHeight/60;
  updateQuantity.Margins.Right=UForm.clWidth/40;
  updateQuantity.Margins.Left=UForm.clWidth/40;
  updateQuantity.Height=45;
  updateQuantity.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  updateQuantity.clProSettings.RoundHeight = 15;
  updateQuantity.clProSettings.RoundWidth = 15;
  updateQuantity.clProSettings.BorderWidth = 3;
  updateQuantity.Text=Qry.FieldByName('quantity').AsString;
  updateQuantity.SetclProSettings(updateQuantity.clProSettings);

  updatePriceLabel = UForm.AddNewProLabel(ProPanel1, 'updatePriceLabel', 'Product Price ');
  updatePriceLabel.margins.Top=UForm.clHeight/40;
  updatePriceLabel.margins.Left=12;
  updatePriceLabel.clProSettings.FontSize =15;
  updatePriceLabel.Align=alTop;
  updatePriceLabel.clProSettings.TextSettings.Font.Style = [fsItalic];
  updatePriceLabel.SetclProSettings(updatePriceLabel.clProSettings);
  
  updatePrice=UForm.AddNewProEdit(ProPanel1,'updatePrice', 'Please enter the product price : ');
  updatePrice.Align=alTop;
  updatePrice.margins.Top=UForm.clHeight/60;
  updatePrice.Margins.Right=UForm.clWidth/40;
  updatePrice.Margins.Left=UForm.clWidth/40;
  updatePrice.Height=45;
  updatePrice.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  updatePrice.clProSettings.RoundHeight = 15;
  updatePrice.clProSettings.RoundWidth = 15;
  updatePrice.clProSettings.BorderWidth = 3;
  updatePrice.Text=Qry.FieldByName('price').AsString;
  updatePrice.SetclProSettings(updatePrice.clProSettings);
  
  updateCategory_id=UForm.AddNewComboBox(UForm,'updateCategory_id');
  updateCategory_id.Align=alTop;
  updateCategory_id.margins.Top=Uform.clHeight/60;
  updateCategory_id.Margins.Right=UForm.clWidth/40;
  updateCategory_id.Margins.Left=UForm.clWidth/40;
  
  GetCategory;

  updateSupplier_id=UForm.AddNewComboBox(UForm,'updateSupplier_id');
  updateSupplier_id.Align=alTop;
  updateSupplier_id.margins.Top=Uform.clHeight/60;
  updateSupplier_id.Margins.Right=UForm.clWidth/40;
  updateSupplier_id.Margins.Left=UForm.clWidth/40;

  GetSupplier;

  
  btnUpdateProduct=UForm.AddNewProButton(UForm,'btnUpdateProduct', 'Update Product');
  btnUpdateProduct.Align=alBottom;
  btnUpdateProduct.margins.Bottom=UForm.clHeight/30;
  btnUpdateProduct.Margins.Right=UForm.clWidth/40;
  btnUpdateProduct.Margins.Left=UForm.clWidth/40;
  btnUpdateProduct.clProSettings.BackgroundColor = clAlphaColor.clHexToColor('#fff7f5');
  btnUpdateProduct.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  btnUpdateProduct.clProSettings.RoundHeight = 15;
  btnUpdateProduct.clProSettings.RoundWidth = 15;
  btnUpdateProduct.clProSettings.BorderWidth = 3;
  btnUpdateProduct.clProSettings.FontSize = 17;
  btnUpdateProduct.clProSettings.TextSettings.Font.Style = [fsItalic,fsBold];
  btnUpdateProduct.SetclProSettings(btnUpdateProduct.clProSettings);
  
  btnDeleteProduct=UForm.AddNewProButton(UForm,'btnDeleteProduct', 'Delete Product');
  btnDeleteProduct.Align=alBottom;
  btnDeleteProduct.margins.Bottom=UForm.clHeight/30;
  btnDeleteProduct.Margins.Right=UForm.clWidth/40;
  btnDeleteProduct.Margins.Left=UForm.clWidth/40;
  btnDeleteProduct.clProSettings.BackgroundColor = clAlphaColor.clHexToColor('#fff7f5');
  btnDeleteProduct.clProSettings.BorderColor  = clAlphaColor.clHexToColor('#ffefeb');
  btnDeleteProduct.clProSettings.RoundHeight = 15;
  btnDeleteProduct.clProSettings.RoundWidth = 15;
  btnDeleteProduct.clProSettings.BorderWidth = 3;
  btnDeleteProduct.clProSettings.FontSize = 17;
  btnDeleteProduct.clProSettings.TextSettings.Font.Style = [fsItalic,fsBold];
  btnDeleteProduct.SetclProSettings(btnDeleteProduct.clProSettings);

  UForm.AddNewEvent(btnDeleteProduct,tbeOnClick,'DeleteProducts');
  UForm.AddNewEvent(btnUpdateProduct,tbeOnClick,'UpdateProducts');
  UForm.Run;
  
}